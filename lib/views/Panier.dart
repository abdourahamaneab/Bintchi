import 'dart:convert';import 'package:http/http.dart' as http;import 'package:flutter/material.dart';import 'package:projetuto/model/produit.dart';import 'package:url_launcher/url_launcher.dart';import 'package:projetuto/model/client.dart';class CartPage extends StatefulWidget {  CartPage({ required this.selectedProduits, required this.User});  final List<Produit> selectedProduits ;  final Client User ;  @override  _CartPageState createState() => _CartPageState();}class _CartPageState extends State<CartPage> {  //chaquz fois que je change de wifi je dois changer l ip  String ip = "192.168.1.17";  double _calculateTotalPrice() {    double totalPrice = 0;    for (Produit produit in widget.selectedProduits) {      totalPrice += (produit.prix * produit.nbProduit);    }    return totalPrice;  }  @override  Future<void> _launchUrl(URL) async {    if (!await launchUrl( Uri.parse(URL))) {      throw Exception('Could not launch $URL');    }  }  @override  Future<void> envoyerDunia() async {    try {      // ne pas oubliez ida de Remplacez l'URL      String apiUrl = "http://$ip/FlutterMysql/Paydunya.php";      // Construire les données à envoyer au backend      Map<String, dynamic> data = {        "selectedProduits": widget.selectedProduits.map((produit) => {          "libelleProd": produit.libelleProd,          "nbProduit": produit.nbProduit,          "prix": produit.prix,          "description": produit.descriptionProd,        }).toList(),      };      String jsonData = json.encode(data);      print("voici les données Json $jsonData ");      // Envoyer la requête HTTP au backend      http.Response response = await http.post(        Uri.parse(apiUrl),        headers: {"Content-Type": "application/json"},        body: jsonData,      );      print("Réponse du serveur : ${response.body}");      if (response.statusCode == 200) {        Map<String, dynamic> responseData = json.decode(response.body);        if (responseData["status"] == "success") {          String paymentUrl = responseData["redirect_url"];          afficherMessageSucces();          await Future.delayed(const Duration(seconds: 10));          _launchUrl(paymentUrl);        } else {          // Afficher un message d'erreur en cas d'échec de la commande          ScaffoldMessenger.of(context).showSnackBar(            SnackBar(              content: Text("Erreur lors de la commande : ${responseData["message"]}"),              backgroundColor: Colors.red,            ),          );          print("Erreur lors de la commande : ${responseData["message"]}");        }      } else {        ScaffoldMessenger.of(context).showSnackBar(          const SnackBar(            content: Text("Erreur lors de la commande. Veuillez réessayer."),            backgroundColor: Colors.deepPurple,          ),        );      }    } catch (e) {      afficherErreur( e);    }  }  Future<void> enregistrerCommandeEtProduitsDansBD() async {    try {      final apiUrl = "http://$ip/FlutterMysql/createCommande.php";      final data = {        "total": _calculateTotalPrice(),        "id_user": widget.User.idUser,        "statut": "en attente", // Remplacez par le statut de la commande        "produits": widget.selectedProduits.map((produit) {          return {            "codeProd": produit.codeProd,            "nbProduit": produit.nbProduit,          };        }).toList(),      };      final response = await http.post(        Uri.parse(apiUrl),        headers: {"Content-Type": "application/json"},        body: json.encode(data),      );      if (response.statusCode == 200) {        print("Commande enregistrée BD ");      }    } catch (e) {      afficherErreur(e);    }  }  void afficherErreur(dynamic e) {    ScaffoldMessenger.of(context).showSnackBar(      SnackBar(        content: Text("Erreur lors de la commande : $e"),        backgroundColor: Colors.black45,      ),    );    print("Erreur lors de la commande : $e");  }  void afficherMessageSucces() {    ScaffoldMessenger.of(context).showSnackBar(const      SnackBar(        content: Text("Commande envoyée avec succès effectuer le paiement poour valider la commande"),        backgroundColor: Colors.green,      ),    );  }@override  Widget build(BuildContext context) {    return Scaffold(            body: Column(      //met le au centre de l ecran        children: [          //ajoute une image          Image.asset(            "assets/logo-range/orange_transparent.png",            width: 250,            height: 300,          ),          //met le dans une liste que je peux scroller          Expanded(            flex: 1,            child: ListView.builder(              padding: const EdgeInsets.all(16),              physics: const BouncingScrollPhysics(),              shrinkWrap: true,              itemCount: widget.selectedProduits.length,              itemBuilder: (context, index) {                Produit produit = widget.selectedProduits[index];                return ListTile(                  leading: Image.network(                    produit.img,                    width: 80,                    height: 80,                  ),                  title: Text("Prix : ${produit.prix} XOF"),                  trailing: Row(                    mainAxisSize: MainAxisSize.min,                    children: [                      IconButton(                        onPressed: () {                          setState(() {                            if (produit.nbProduit > 1) {                              produit.nbProduit--;                            } else {                              widget.selectedProduits.remove(produit);                            }                          });                        },                        icon: const Icon(Icons.clear,color: Color.fromARGB(255,255,153,0),),                      ),                      Text(produit.nbProduit.toString()),                      IconButton(                        onPressed: () {                          setState(() {                            if (produit.nbProduit < produit.qteProd) {                              produit.nbProduit++;                            }                          });                        },                        icon: const Icon(Icons.add,color: Color.fromARGB(255,255,153,0),),                      ),                    ],                  ),                );              },            ),          ),          Padding(            padding: const EdgeInsets.all(16.0),            child: Text(              "Somme totale : ${_calculateTotalPrice()} XOF",              style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),            ),          ),          ElevatedButton(            style: ButtonStyle(              backgroundColor: MaterialStateProperty.all<Color>(Color.fromARGB(255,255,153,0)),            ),            onPressed: () {              enregistrerCommandeEtProduitsDansBD();              envoyerDunia();              setState(() {                widget.selectedProduits.clear();              });            },            child: const Text("Commander"),          ),          SizedBox(height: 16)        ],      ),    );  }}